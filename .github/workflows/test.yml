name: Test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

permissions:
  contents: read

jobs:
  collect:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Collect Docker Dirs
      id: docker-dirs
      ##
      # Create a JSON array of the ci subdirectories that contain
      # docker-compose.yml files. We'll use that output as a test matrix
      # in github actions.
      run: |
        shopt -s nullglob
        dirs=( ci/*/docker-compose.yml )
        dirs=( "${dirs[@]%/docker-compose.yml}" )
        dirs=( "${dirs[@]#ci/}" )
        {
          printf 'docker_dirs='
          printf '%s\n' "${dirs[@]}" | jq -R . | jq -sc .
        } >> "$GITHUB_OUTPUT"
    outputs:
      docker-dirs: ${{ steps.docker-dirs.outputs.docker_dirs }}
  build:
    runs-on: ubuntu-22.04
    needs: collect
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        docker_dir: ${{ fromJson(needs.collect.outputs.docker-dirs) }}
        testsuite:
        - 'api'
        - 'common'
        - 'controllers'
        - 'e2e'
        - 'fixtures'
        - 'services'
        - 'unit'
        - 'validators'
    env:
      DOCKER_DIR: ${{ matrix.docker_dir }}
    steps:
    - uses: actions/checkout@v4
    - name: Parse Docker Dir
      id: parse
      run: |
        IFS=: read -r database db < <(yq '.services.mysql.image' "ci/${{ matrix.docker_dir }}/docker-compose.yml")
        IFS=_ read -r webserver php _ <<< "${{ matrix.docker_dir }}"
        printf -v php '%d.%d' "${php::1}" "${php:1}"
        case "$webserver" in
          apache) openemr_dir=/var/www/localhost/htdocs/openemr;;
          nginx) openemr_dir=/usr/share/nginx/html/openemr;;
          *) echo "Unknown webserver: $webserver" >&2; exit 1 ;;
        esac
        {
          echo "database=$database"
          echo "db=$db"
          echo "openemr_dir=$openemr_dir"
          echo "php=$php"
          echo "webserver=$webserver"
        } >> "$GITHUB_OUTPUT"
    # - name: test
    #   run: |
    #     echo "database=${{ steps.parse.outputs.database }}"
    #     echo "db=${{ steps.parse.outputs.db }}"
    #     echo "docker_dir=${{ matrix.docker_dir }}"
    #     echo "php=${{ steps.parse.outputs.php }}"
    #     echo "testsuite=${{ matrix.testsuite }}"
    #     echo "webserver=${{ steps.parse.outputs.webserver }}"
    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ steps.parse.outputs.php }}

    - name: Report PHP Version
      run: php -v

    - name: Install npm package
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Main build
      run: |
        . ci/ciLibrary.source
        composer_github_auth
        main_build

    - name: CCDA build
      run: |
        . ci/ciLibrary.source
        ccda_build

    - name: Dockers environment start
      run: |
        . ci/ciLibrary.source
        dockers_env_start

    - name: Wait for MySQL to initialize
      # If the database is MySQL, we don't have a healthcheck
      # so we need to sleep to give it time to start.
      if: ${{ steps.parse.outputs.database == 'mysql' }}
      run: |
        echo "Waiting 60 seconds for MySQL to initialize..."
        sleep 60

    - name: Install and configure
      env:
        OPENEMR_DIR: ${{ steps.parse.outputs.openemr_dir }}
      run: |
        . ci/ciLibrary.source
        install_configure

    - name: Run tests
      env:
        OPENEMR_DIR: ${{ steps.parse.outputs.openemr_dir }}
      run: |
        . ci/ciLibrary.source
        build_test_${{ needs.parse.outputs.testsuite }}
